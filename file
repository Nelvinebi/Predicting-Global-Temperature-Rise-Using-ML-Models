#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
generate_global_temp_synthetic.py
Creates a synthetic global temperature dataset (1880–2024) and saves to Excel/CSV.

Outputs (by default in current folder):
- global_temp_synthetic.xlsx
- global_temp_synthetic.csv
"""

import argparse
import numpy as np
import pandas as pd

def generate_synthetic_forcings(start_year=1880, end_year=2024, seed=42):
    np.random.seed(seed)
    years = np.arange(start_year, end_year + 1)
    n = len(years)
    t = (years - years.min()) / (years.max() - years.min() + 1e-9)

    # Greenhouse gases (illustrative trends + noise)
    co2 = 280 + 10*np.sin(2*np.pi*t*0.5) + 140*t**1.6 + np.random.normal(0, 1.2, n)
    ch4 = 700 + 300*t**1.4 + 20*np.sin(2*np.pi*t*0.8) + np.random.normal(0, 8, n)
    n2o = 270 + 40*t**1.2 + np.random.normal(0, 0.8, n)

    # Aerosols (mid-century hump)
    aero = 0.05 + 0.25*np.exp(-((years-1960)/18)**2) + np.random.normal(0, 0.01, n)

    # Solar (cycles)
    solar = 0.3*np.sin(2*np.pi*years/11.0) + 0.02*np.sin(2*np.pi*years/3.7)

    # ENSO (AR(1))
    enso = np.zeros(n); rho = 0.55
    for i in range(1, n):
        enso[i] = rho*enso[i-1] + np.random.normal(0, 0.5)

    # Volcanic (negative spikes)
    volcanic = np.random.normal(0, 0.05, n)
    for yr in [1883, 1902, 1963, 1982, 1991]:
        idx = np.where(years == yr)[0]
        if len(idx):
            volcanic[idx[0]] -= 0.6 + 0.2*np.random.rand()

    # Land-use / urbanization indices (0..1)
    land_use = np.clip(0.2 + 0.8*t + 0.05*np.sin(4*np.pi*t), 0, 1)
    urban = np.clip(0.1 + 0.9*t**1.3 + 0.02*np.random.randn(n), 0, 1)

    return pd.DataFrame({
        "year": years,
        "co2_ppm": co2,
        "ch4_ppb": ch4,
        "n2o_ppb": n2o,
        "aerosol_optical_depth": aero,
        "solar_irradiance_anom": solar,
        "enso_index": enso,
        "volcanic_forcing": volcanic,
        "land_use_index": land_use,
        "urbanization_index": urban
    })

def synthesize_temperature(df):
    # Coefficients to map forcings to temp anomaly (°C), sign/direction plausible
    co2_ref, ch4_ref, n2o_ref = 280, 700, 270
    ghg_term = (df["co2_ppm"]-co2_ref)*0.018 + (df["ch4_ppb"]-ch4_ref)*0.0005 + (df["n2o_ppb"]-n2o_ref)*0.0008
    aero_term = df["aerosol_optical_depth"]*(-0.9)
    solar_term = df["solar_irradiance_anom"]*0.12
    enso_term = df["enso_index"]*0.08
    volc_term = df["volcanic_forcing"]*0.7
    land_term = df["land_use_index"]*0.4
    urb_term = df["urbanization_index"]*0.25

    # Autocorrelated residual (ocean heat memory)
    n = len(df); ar = np.zeros(n); phi = 0.85; sigma = 0.06
    for i in range(1, n):
        ar[i] = phi*ar[i-1] + np.random.normal(0, sigma)

    baseline = -0.4
    temp_anom = baseline + ghg_term + aero_term + solar_term + enso_term + volc_term + land_term + urb_term + ar
    out = df.copy()
    out["temp_anomaly_C"] = temp_anom
    return out

def main():
    parser = argparse.ArgumentParser(description="Generate synthetic global temperature dataset (1880–2024).")
    parser.add_argument("--excel", default="global_temp_synthetic.xlsx", help="Output Excel filename")
    parser.add_argument("--csv", default="global_temp_synthetic.csv", help="Output CSV filename")
    parser.add_argument("--start", type=int, default=1880, help="Start year")
    parser.add_argument("--end", type=int, default=2024, help="End year")
    parser.add_argument("--seed", type=int, default=42, help="Random seed")
    args = parser.parse_args()

    forcings = generate_synthetic_forcings(args.start, args.end, args.seed)
    dataset = synthesize_temperature(forcings)

    dataset.to_excel(args.excel, index=False)
    dataset.to_csv(args.csv, index=False)
    print(f"Saved: {args.excel}")
    print(f"Saved: {args.csv}")
    print(dataset.head())

if __name__ == "__main__":
    main()
